// Generated by CoffeeScript 1.3.3
(function() {
  var Mysql, Path, Utils, mysql;

  mysql = require("mysql");

  Utils = require("./utils");

  Path = require("path");

  Mysql = (function() {

    function Mysql(config) {
      this.config = config;
    }

    Mysql.prototype.using = function(cb) {
      var client;
      client = mysql.createClient({
        user: this.config.user,
        password: this.config.password,
        database: this.config.database
      });
      return cb(null, client);
    };

    Mysql.prototype.exec = function(sql, cb) {
      return this.using(function(err, client) {
        if (err) {
          return cb(err);
        }
        return client.query(sql, function() {
          return cb.apply(null, Array.prototype.slice.apply(arguments));
        });
      });
    };

    Mysql.prototype.execFile = function(filename, cb) {
      var args, command, host, port;
      port = this.config.port || 3306;
      host = this.config.host || "localhost";
      command = "mysql";
      args = ["-u" + this.config.user, "-p" + this.config.password, "-D" + this.config.database, "-h" + host, "-P" + port, "-e", "source " + filename];
      return Utils.pushExec(command, args, Path.dirname(filename), cb);
    };

    Mysql.prototype.init = function(cb) {
      var sql;
      sql = "create table if not exists schema_migrations(\n  version varchar(256) not null primary key,\n  up text,\n  down text,\n  created_at timestamp default current_timestamp\n);";
      return this.exec(sql, cb);
    };

    Mysql.prototype.last = function(cb) {
      var sql;
      sql = "select *\nfrom schema_migrations\norder by version desc\nlimit 1;";
      return this.exec(sql, function(err, results) {
        if (err) {
          return cb(err);
        }
        return cb(null, results[0]);
      });
    };

    Mysql.prototype.all = function(cb) {
      var sql;
      sql = "select *\nfrom schema_migrations\norder by version desc;";
      return this.exec(sql, function(err, results) {
        if (err) {
          return cb(err);
        }
        return cb(null, results);
      });
    };

    Mysql.prototype.add = function(version, up, down, cb) {
      var sql;
      sql = "insert into schema_migrations(version, up, down)\nvalues(?, ?, ?)";
      return this.using(function(err, client) {
        return client.query(sql, [version, up, down], cb);
      });
    };

    Mysql.prototype.remove = function(version, cb) {
      var sql;
      sql = "delete from schema_migrations\nwhere version = ?";
      return this.using(function(err, client) {
        return client.query(sql, [version], function(err) {
          return cb(err);
        });
      });
    };

    return Mysql;

  })();

  module.exports = Mysql;

}).call(this);
